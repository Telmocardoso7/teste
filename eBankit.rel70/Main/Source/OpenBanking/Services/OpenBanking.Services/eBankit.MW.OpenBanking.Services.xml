<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eBankit.MW.OpenBanking.Services</name>
    </assembly>
    <members>
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController">
            <summary>
            
            </summary>
            <seealso cref="T:eBankit.MW.OpenBanking.Services.Controllers.Common.BaseController" />
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController.#ctor(eBankit.MW.OpenBanking.Data.EbankitWebApi.RepositoriesInterfaces.ICommonRepository{eBankit.LIB.OpenBanking.Models.DeveloperPortal.API})">
            <summary>
            
            </summary>
            <param name="aPIRepository"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController.GetListAPI" -->
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController.CreateNewAPI(eBankit.LIB.OpenBanking.Models.DeveloperPortal.API)">
            <summary>
            Creates a new API
            </summary>
            <param name="input"></param>
            <returns name="result">New Api identifier.</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController.UpdateAPI(eBankit.LIB.OpenBanking.Models.DeveloperPortal.API)">
            <summary>
            Updates an API
            </summary>
            <param name="input"></param>
            <returns name="result">true if API updated successfully</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.APIController.DeleteAPI(System.Guid)">
            <summary>
            Deletes an API
            </summary>
            <param name="id"></param>
            <returns name="result">true if API deleted successfully</returns>
        </member>
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController">
            <summary>
            
            </summary>
            <seealso cref="T:eBankit.MW.OpenBanking.Services.Controllers.Common.BaseController" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController.GetListApps" -->
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController.GetApps(System.Guid)">
            <summary>
            Gets the correspondent App to the given id
            </summary>
            <param name="id">App identifier.</param>
            <returns name="App"></returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController.CreateNewApp(eBankit.LIB.OpenBanking.Models.DeveloperPortal.App)">
            <summary>
            Creates a new App
            </summary>
            <param name="input"></param>
            <returns name="result">New App identifier.</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController.UpdateApp(eBankit.LIB.OpenBanking.Models.DeveloperPortal.App)">
            <summary>
            Updates an App
            </summary>
            <param name="input"></param>
            <returns name="result">true if App updated successfully</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.AppController.DeleteApp(System.Guid)">
            <summary>
            Deletes an App
            </summary>
            <param name="id"></param>
            <returns name="result">true if App deleted successfully</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eBankit.MW.OpenBanking.Services.Controllers.Portal.CompaniesController.GetListCompanies" -->
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.CompaniesController.GetCompany(System.Guid)">
            <summary>
            Gets selected Companys
            </summary>
            /// <param name="id">Company Id</param>
            <returns name="Company">Selected Company</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.CompaniesController.CreateNewCompany(eBankit.LIB.OpenBanking.Models.DeveloperPortal.Company)">
            <summary>
            Creates a new Company
            </summary>
            <param name="input"></param>
            <returns name="result">New Company identifier.</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.CompaniesController.UpdateCompany(eBankit.LIB.OpenBanking.Models.DeveloperPortal.Company)">
            <summary>
            Updates an Company
            </summary>
            <param name="input"></param>
            <returns name="result">true if Company updated successfully</returns>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.Portal.CompaniesController.DeleteCompany(System.Guid)">
            <summary>
            Deletes a Company
            </summary>
            <param name="id"></param>
            <returns name="result">true if Company deleted successfully</returns>
        </member>
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi">
            <summary>
            
            </summary>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.CreateConsent(System.Nullable{System.Guid},eBankit.LIB.OpenBanking.Models.Consents,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Create consent
            </summary>
            <remarks>This method create a consent resource, defining access rights to dedicated accounts of  a given PSU-ID. These accounts are addressed explicitly in the method as  parameters as a core function.  **Side Effects** When this Consent Request is a request where the \&quot;recurringIndicator\&quot; equals \&quot;true\&quot;,  and if it exists already a former consent for recurring access on account information  for the addressed PSU, then the former consent automatically expires as soon as the new  consent request is authorised by the PSU.  Optional Extension As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts.   As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account.  The relation to accounts is then handled afterwards between PSU and ASPSP.  This option is not supported for the Embedded SCA Approach.  As a last option, an ASPSP might in addition accept a command with access rights   * to see the list of available payment accounts or   * to see the list of available payment accounts with balances. </remarks>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="body">Requestbody for a consents request</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="tPPRedirectPreferred">If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. </param>
            <param name="tPPRedirectURI">URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach (including OAuth2 SCA approach), specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. </param>
            <param name="tPPNokRedirectURI">If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. </param>
            <param name="tPPExplicitAuthorisationPreferred">If it equals \&quot;true\&quot;, the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \&quot;false\&quot; or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.DeleteConsent(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Delete Consent
            </summary>
            <remarks>The TPP can delete an account information consent object if needed.</remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="204">No Content</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetAccountList(System.Nullable{System.Guid},System.String,System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read Account List
            </summary>
            <remarks>Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. </remarks>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="withBalance">If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetBalances(System.String,System.Nullable{System.Guid},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read Balance
            </summary>
            <remarks>Reads account data from a given account addressed by \&quot;account-id\&quot;.   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \&quot;GET Account List\&quot; call.  The account-id is constant at least throughout the lifecycle of a given consent. </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetCardAccount(System.Nullable{System.Guid},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Reads a list of card accounts
            </summary>
            <remarks>Reads a list of card accounts with additional information, e.g. balance information.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of card accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.  </remarks>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetCardAccountBalances(System.String,System.Nullable{System.Guid},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read card account balances
            </summary>
            <remarks>Reads balance data from a given card account addressed by  \&quot;account-id\&quot;.   Remark This account-id can be a tokenised identification due  to data protection reason since the path information might be  logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the  \&quot;GET Card Account List\&quot; call </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetCardAccountTransactionList(System.String,System.String,System.Nullable{System.Guid},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read transaction list of an account
            </summary>
            <remarks>Reads account data from a given card account addressed by \&quot;account-id\&quot;. </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="bookingStatus">Permitted codes are    * \&quot;booked\&quot;,   * \&quot;pending\&quot; and    * \&quot;both\&quot; \&quot;booked\&quot; shall be supported by the ASPSP. To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP,  Error code if not supported in the online banking frontend </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. </param>
            <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.   Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. </param>
            <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after  the transaction with identification entryReferenceFrom alternatively to the above defined period.  This is a implementation of a delta access.  If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP  if a delta report is supported.  Optional if supported by API provider. </param>
            <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider</param>
            <param name="withBalance">If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetConsentAuthorisation(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Get Consent Authorisation Sub-Resources Request
            </summary>
            <remarks>Return a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. </remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetConsentInformation(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Get Consent Request
            </summary>
            <remarks>Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. </remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetConsentStatus(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Consent status request
            </summary>
            <remarks>Read the status of an account information consent resource.</remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetTransactionDetails(System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read Transaction Details
            </summary>
            <remarks>Reads transaction details from a given transaction addressed by \&quot;resourceId\&quot; on a given account addressed by \&quot;account-id\&quot;.  This call is only available on transactions as reported in a JSON format.  **Remark** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \&quot;Read Transaction List\&quot; call within the _links subfield. </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="resourceId">This identification is given by the attribute resourceId of the corresponding entry of a transaction list. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.GetTransactionList(System.String,System.String,System.Nullable{System.Guid},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read transaction list of an account
            </summary>
            <remarks>Read transaction reports or transaction lists of a given account ddressed by \&quot;account-id\&quot;, depending on the steering parameter  \&quot;bookingStatus\&quot; together with balances.  For a given account, additional parameters are e.g. the attributes \&quot;dateFrom\&quot; and \&quot;dateTo\&quot;.  The ASPSP might add balance information, if transaction lists without balances are not supported. </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="bookingStatus">Permitted codes are    * \&quot;booked\&quot;,   * \&quot;pending\&quot; and    * \&quot;both\&quot; \&quot;booked\&quot; shall be supported by the ASPSP. To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP,  Error code if not supported in the online banking frontend </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. </param>
            <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.   Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. </param>
            <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after  the transaction with identification entryReferenceFrom alternatively to the above defined period.  This is a implementation of a delta access.  If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP  if a delta report is supported.  Optional if supported by API provider. </param>
            <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider</param>
            <param name="withBalance">If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.ReadAccountDetails(System.String,System.Nullable{System.Guid},System.String,System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read Account Details
            </summary>
            <remarks>Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE** The account-id can represent a multicurrency account.  In this case the currency code is set to \&quot;XXX\&quot;.  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="withBalance">If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.AccountInformationServiceAISApi.ReadCardAccount(System.String,System.Nullable{System.Guid},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Reads details about a card account
            </summary>
            <remarks>Reads details about a card account.  It is assumed that a consent of the PSU to this access is already given  and stored on the ASPSP system. The addressed details of this account depends  then on the stored consent addressed by consentId, respectively the OAuth2  access token. </remarks>
            <param name="accountId">This identification is denoting the addressed account.  The account-id is retrieved by using a \&quot;Read Account List\&quot; call.  The account-id is the \&quot;id\&quot; attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="consentID">This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.PSD2.ConfirmationOfFundsServiceApiController">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.ConfirmationOfFundsServiceApiController.CheckAvailabilityOfFunds(eBankit.LIB.OpenBanking.Models.ConfirmationOfFunds,System.Nullable{System.Guid},System.String,System.String,System.Byte[])" -->
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController.CancelPayment(System.String,System.String,System.String)">
            <summary>
            Payment Cancellation Request
            </summary>
            <remarks>This method initiates the cancellation of a payment.  Depending on the payment-service, the payment-product and the ASPSP&#x27;s implementation,  this TPP call might be sufficient to cancel a payment.  If an authorisation of the payment cancellation is mandated by the ASPSP,  a corresponding hyperlink will be contained in the response message.  Cancels the addressed payment with resource identification paymentId if applicable to the payment-service, payment-product and received in product related timelines (e.g. before end of business day for scheduled payments of the last business day before the scheduled execution day).   The response to this DELETE command will tell the TPP whether the    * access method was rejected   * access method was successful, or   * access method is generally applicable, but further authorisation processes are needed. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="202">Received</response>
            <response code="204">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController.GetPaymentInformation(System.String,System.String,System.String)">
            <summary>
            Get Payment Information
            </summary>
            <remarks>Returns the content of a payment object</remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController.GetPaymentInitiationCancellationAuthorisationInformation(System.String,System.String,System.String)">
            <summary>
            Will deliver an array of resource identifications to all generated cancellation authorisation sub-resources.
            </summary>
            <remarks>Retrieve a list of all created cancellation authorisation sub-resources. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController.GetPaymentInitiationStatus(System.String,System.String,System.String)">
            <summary>
            Payment initiation status request
            </summary>
            <remarks>Check the transaction status of a payment initiation.</remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.PaymentInitiationServicePISApiController.InitiatePayment(System.Object,System.String,System.String,System.Nullable{System.Guid},System.String,System.Object,eBankit.LIB.OpenBanking.Models.PeriodicPaymentInitiationXmlPart2StandingorderTypeJson,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
             <summary>
             Payment initiation request
             </summary>
             <remarks>This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**    - Payment products with payment information in *JSON* format     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments*** A single payment initiation request.   * ***bulk*** A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic***      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like &#x27;scaRedirect&#x27; or &#x27;scaOAuth&#x27; cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the &#x27;startAuthorisation&#x27; link. </remarks>
             <param name="body">JSON request body for a payment inition request message 
            There are the following payment-products supported:
              * &quot;sepa-credit-transfers&quot; with JSON-Body
              * &quot;instant-sepa-credit-transfers&quot; with JSON-Body
              * &quot;target-2-payments&quot; with JSON-Body
              * &quot;cross-border-credit-transfers&quot; with JSON-Body
              * &quot;pain.001-sepa-credit-transfers&quot; with XML pain.001.001.03 body for SCT scheme
              * &quot;pain.001-instant-sepa-credit-transfers&quot; with XML pain.001.001.03 body for SCT INST scheme
              * &quot;pain.001-target-2-payments&quot; with pain.001 body. 
                Only country specific schemes are currently available
              * &quot;pain.001-cross-border-credit-transfers&quot; with pain.001 body. 
                Only country specific schemes are currently available
            There are the following payment-services supported:
              * &quot;payments&quot;
              * &quot;periodic&quot;
              * &quot;bulk-paments&quot;
            All optional, conditional and predefined but not yet used fields are defined.
            </param>
             <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
             <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
             <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
             <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
             <param name="xmlSct"></param>
             <param name="jsonStandingorderType"></param>
             <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
             <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
             <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
             <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
             <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
             <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
             <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
             <param name="consentID">This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
             <param name="tPPRedirectPreferred">If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. </param>
             <param name="tPPRedirectURI">URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach (including OAuth2 SCA approach), specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. </param>
             <param name="tPPNokRedirectURI">If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. </param>
             <param name="tPPExplicitAuthorisationPreferred">If it equals \&quot;true\&quot;, the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \&quot;false\&quot; or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. </param>
             <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
             <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
             <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
             <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
             <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
             <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
             <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
             <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
             <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
             <response code="201">CREATED</response>
             <response code="400">Bad Request</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="404">Not found</response>
             <response code="405">Method Not Allowed</response>
             <response code="406">Not Acceptable</response>
             <response code="408">Request Timeout</response>
             <response code="415">Unsupported Media Type</response>
             <response code="429">Too Many Requests</response>
             <response code="500">Internal Server Error</response>
             <response code="503">Service Unavailable</response>
        </member>
        <member name="T:eBankit.MW.OpenBanking.Services.Controllers.PSD2.SigningBasketsApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.SigningBasketsApiController.CreateSigningBasket(System.Nullable{System.Guid},System.String,eBankit.LIB.OpenBanking.Models.SigningBasket,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Create a signing basket resource
            </summary>
            <remarks>Create a signing basket resource for authorising several transactions with one SCA method.  The resource identifications of these transactions are contained in the  payload of this access method </remarks>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="body">Request body for a confirmation of an establishing signing basket request</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="consentID">This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. </param>
            <param name="tPPRedirectPreferred">If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. </param>
            <param name="tPPRedirectURI">URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach (including OAuth2 SCA approach), specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. </param>
            <param name="tPPNokRedirectURI">If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. </param>
            <param name="tPPExplicitAuthorisationPreferred">If it equals \&quot;true\&quot;, the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \&quot;false\&quot; or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.PSD2.SigningBasketsApiController.GetSigningBasket(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Returns the content of an signing basket object.
            </summary>
            <remarks>Returns the content of an signing basket object.</remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.DeleteSigningBasket(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Delete the signing basket
            </summary>
            <remarks>Delete the signing basket structure as long as no (partial) authorisation has yet been applied.  The undlerying transactions are not affected by this deletion.  Remark The signing basket as such is not deletable after a first (partial) authorisation has been applied.  Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="204">No Content</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetConsentScaStatus(System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read the SCA status of the consent authorisation.
            </summary>
            <remarks>This method returns the SCA status of a consent initiation&#x27;s authorisation sub-resource. </remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetPaymentCancellationScaStatus(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read the SCA status of the payment cancellation&#x27;s authorisation.
            </summary>
            <remarks>This method returns the SCA status of a payment initiation&#x27;s authorisation sub-resource. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="cancellationId">Identification for cancellation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetPaymentInitiationAuthorisation(System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Get Payment Initiation Authorisation Sub-Resources Request
            </summary>
            <remarks>Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetPaymentInitiationScaStatus(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read the SCA Status of the payment authorisation
            </summary>
            <remarks>This method returns the SCA status of a payment initiation&#x27;s authorisation sub-resource. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetSigningBasketAuthorisation(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Get Signing Basket Authorisation Sub-Resources Request
            </summary>
            <remarks>Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetSigningBasketScaStatus(System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read the SCA status of the signing basket authorisation
            </summary>
            <remarks>This method returns the SCA status of a signing basket&#x27;s authorisation sub-resource. </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.GetSigningBasketStatus(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Read the status of the signing basket
            </summary>
            <remarks>Returns the status of a signing basket object.  </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.StartConsentAuthorisation(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Start the authorisation process for a consent
            </summary>
            <remarks>Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,      * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. </remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.StartPaymentAuthorisation(System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Start the authorisation process for a payment initiation
            </summary>
            <remarks>Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,      * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.StartPaymentInitiationCancellationAuthorisation(System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Start the authorisation process for the cancellation of the addressed payment
            </summary>
            <remarks>Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment.  The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,      * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.StartSigningBasketAuthorisation(System.String,System.Nullable{System.Guid},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Start the authorisation process for a signing basket
            </summary>
            <remarks>Create an authorisation sub-resource and start the authorisation process of a signing basket.  The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,      * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.UpdateConsentsPsuData(System.String,System.String,System.Nullable{System.Guid},System.Object,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Update PSU Data for consents
            </summary>
            <remarks>This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach  * Redirect SCA Approach   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. </remarks>
            <param name="consentId">ID of the corresponding consent object as returned by an Account Information Consent Request. </param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="body"></param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.UpdatePaymentCancellationPsuData(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Object,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Update PSU Data for payment initiation cancellation
            </summary>
            <remarks>This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach  * Redirect SCA Approach   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="cancellationId">Identification for cancellation resource.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="body"></param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.UpdatePaymentPsuData(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Object,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Update PSU data for payment initiation
            </summary>
            <remarks>This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach  * Redirect SCA Approach   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. </remarks>
            <param name="paymentService">Payment service:  Possible values are: * payments * bulk * periodic </param>
            <param name="paymentProduct">The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. </param>
            <param name="paymentId">Resource identification of the generated payment initiation resource.</param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="body"></param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="M:eBankit.MW.OpenBanking.Services.Controllers.CommonServicesApi.UpdateSigningBasketPsuData(System.String,System.String,System.Nullable{System.Guid},System.Object,System.String,System.String,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Update PSU Data for signing basket
            </summary>
            <remarks>This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach  * Redirect SCA Approach   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. </remarks>
            <param name="basketId">This identification of the corresponding signing basket object. </param>
            <param name="authorisationId">Resource identification of the related SCA.</param>
            <param name="xRequestID">ID of the request, unique to the call, as determined by the initiating party.</param>
            <param name="body"></param>
            <param name="digest">Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request.</param>
            <param name="signature">A signature of the request by the TPP on application level. This might be mandated by ASPSP. </param>
            <param name="tPPSignatureCertificate">The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. </param>
            <param name="PSU_ID">Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP&#x27;s documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceeding AIS service in the same session. </param>
            <param name="pSUIDType">Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. </param>
            <param name="pSUCorporateID">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUCorporateIDType">Might be mandated in the ASPSP&#x27;s documentation. Only used in a corporate context. </param>
            <param name="pSUIPAddress">The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. </param>
            <param name="pSUIPPort">The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. </param>
            <param name="pSUAccept">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptCharset">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptEncoding">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUAcceptLanguage">The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. </param>
            <param name="pSUUserAgent">The forwarded Agent header field of the HTTP request between PSU and TPP, if available. </param>
            <param name="pSUHttpMethod">HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE </param>
            <param name="pSUDeviceID">UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. </param>
            <param name="pSUGeoLocation">The forwarded Geo Location of the corresponding http request between PSU and TPP if available. </param>
            <response code="200">OK</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="405">Method Not Allowed</response>
            <response code="406">Not Acceptable</response>
            <response code="408">Request Timeout</response>
            <response code="415">Unsupported Media Type</response>
            <response code="429">Too Many Requests</response>
            <response code="500">Internal Server Error</response>
            <response code="503">Service Unavailable</response>
        </member>
        <member name="T:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController">
            <summary>
            
            </summary>
            <seealso cref="T:eBankit.MW.OpenBanking.Services.Controllers.Common.BaseController" />
        </member>
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.GetListProfileUser">
            <summary>
            Gets all registered Profile Users
            </summary>
            <returns name="List ProfileUser">List of Profile Users</returns>
        </member>
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.GetProfileUser(System.Guid)">
            <summary>
            Gets the correspondent ProfileUser
            </summary>
            <param name="id">ProfileUser identifier.</param>
            <returns name="ProfileUser"></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.GetProfileUserApps(System.Guid,System.Nullable{System.Guid})" -->
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.GetProfileUserAppsByName(System.String)">
            <summary>
            Searches an app by name
            </summary>
            <param name="appName">Nome da app</param>
        </member>
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.CreateNewProfileUser(eBankit.LIB.OpenBanking.Models.DeveloperPortal.ProfileUser)">
            <summary>
            Creates a new ProfileUser
            </summary>
            <param name="input"></param>
            <returns name="result">New ProfileUser identifier.</returns>
        </member>
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.UpdateProfileUser(eBankit.LIB.OpenBanking.Models.DeveloperPortal.ProfileUser)">
            <summary>
            Updates a ProfileUser
            </summary>
            <param name="input"></param>
            <returns name="result">true if ProfileUser updated successfully</returns>
        </member>
        <member name="M:eBankit.OpenBankingProfileUser.Services.Controllers.Portal.ProfileUserController.DeleteProfileUser(System.Guid)">
            <summary>
            Deletes a ProfileUserp
            </summary>
            <param name="id"></param>
            <returns name="result">true if ProfileUser deleted successfully</returns>
        </member>
    </members>
</doc>
